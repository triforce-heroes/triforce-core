import{marshall as t,unmarshall as e}from"@aws-sdk/util-dynamodb";import{DDB as s}from"./DDB.js";export class DDBQueryBuilder{constructor(t,e,s,i){this.options={},this.namesIndex=0,this.projections=[],this.attributeNames={},this.attributeValues={},this.keyConditionExpressions=[],this.tableName=t,Object.assign(this.options,i),this.pushKeyConditionExpression(e,"=",s)}pushProjections(...t){this.projections.push(...t.map(t=>this.newAttributeName(t)))}usingIndex(t,e,...s){this.options.IndexName=t,void 0!==e&&this.pushKeyConditionExpression(e,...s)}async get(){let i=[],n={...this.options,TableName:this.tableName,KeyConditionExpression:this.keyConditionExpressions.join(" AND "),ProjectionExpression:this.projections.join(","),ExpressionAttributeNames:this.attributeNames,ExpressionAttributeValues:t(this.attributeValues)};for(;;){let t=await s().query(n);if(i.push(...t.Items.map(t=>e(t))),t.LastEvaluatedKey){n.ExclusiveStartKey=t.LastEvaluatedKey;continue}break}return i}newAttributeName(t){let e=`#${this.namesIndex++}`;return this.attributeNames[e]=t,e}newAttributeValue(t){let e=`:${this.namesIndex++}`;return this.attributeValues[e]=t,e}pushKeyConditionExpression(t,...e){let s=this.newAttributeName(t);if("BETWEEN"===e[0]){let t=this.newAttributeValue(e[1]),i=this.newAttributeValue(e[2]);this.keyConditionExpressions.push(`${s} BETWEEN ${t} AND ${i}`)}else if("BEGINS_WITH"===e[0]){let t=this.newAttributeValue(e[1]);this.keyConditionExpressions.push(`begins_with(${s},${t})`)}else{let t=this.newAttributeValue(e[1]);this.keyConditionExpressions.push(`${s}${e[0]}${t}`)}}}