let e;import{DynamoDB as t}from"@aws-sdk/client-dynamodb";import{fromEnv as o}from"@aws-sdk/credential-providers";import{marshall as i,unmarshall as n}from"@aws-sdk/util-dynamodb";import{chunk as r}from"../Array.js";export function DDB(){return e??=new t({region:process.env.AWS_REGION??"us-east-1",credentials:o()})}export async function DDBGetItem(e,t,o,r,s,a){let m=await DDB().getItem({TableName:e,ConsistentRead:!1,ReturnConsumedCapacity:"TOTAL",Key:i({[t]:o,...void 0!==r&&void 0!==s?{[r]:s}:{}}),ProjectionExpression:a?.map(e=>`#${e}`).join(", "),ExpressionAttributeNames:void 0===a?void 0:Object.fromEntries(a.map(e=>[`#${e}`,e]))});return m.Item?n(m.Item):null}export async function DDBUpdateItem(e,t,o,n,r,s){let a={},m={},u=[],p=[];for(let[e,t]of Object.entries(s)){if(a[`#${e}`]=e,void 0===t){p.push(`#${e}`);continue}m[`:${e}`]=t,u.push(`#${e} = :${e}`)}let d=[u.length>0?`SET ${u.join(", ")}`:void 0,p.length>0?`REMOVE ${p.join(", ")}`:void 0],D={TableName:e,Key:i({[t]:o,...void 0!==n&&void 0!==r?{[n]:r}:{}}),UpdateExpression:d.join(" "),ExpressionAttributeNames:a,ExpressionAttributeValues:i(m)};return DDB().updateItem(D)}export async function DDBDeleteItem(e,t,o,n,r){return DDB().deleteItem({TableName:e,Key:i({[t]:o,[n]:r})})}export async function DDBBatchWrite(e,t,o=25){for(let n of r(t,o))await DDB().batchWriteItem({RequestItems:{[e]:n.map(e=>({PutRequest:{Item:i(e)}}))}})}export async function DDBBatchDelete(e,t,o=25){for(let n of r(t,o))await DDB().batchWriteItem({RequestItems:{[e]:n.map(e=>({DeleteRequest:{Key:i(e)}}))}})}